"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessTokenRepository = void 0;
const common_1 = require("@nestjs/common");
const domain_1 = require("../../domain");
const typeorm_1 = require("typeorm");
const modules_dto_1 = require("../../domain/modules/modules.dto");
let AccessTokenRepository = class AccessTokenRepository {
    constructor(repository) {
        this.repository = repository;
    }
    async findByAccessToken(accessToken) {
        const token = await this.repository.findOne({
            where: {
                accessToken: accessToken
            },
            relations: ['client']
        });
        if (!token) {
            throw domain_1.AccessTokenNotFoundException.withAccessToken(accessToken);
        }
        return token;
    }
    async findByRefreshToken(refreshToken) {
        const token = await this.repository.findOne({
            where: {
                refreshToken: refreshToken
            },
            relations: ['client']
        });
        if (!token) {
            throw domain_1.AccessTokenNotFoundException.withRefreshToken(refreshToken);
        }
        return token;
    }
    async create(accessToken) {
        return await this.repository.save(accessToken);
    }
    async delete(accessToken) {
        return await this.repository.delete(accessToken.id);
    }
    async deleteById(id) {
        return await this.repository.delete(id);
    }
};
AccessTokenRepository = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(modules_dto_1.ACCESS_TOKEN_PROVIDER)),
    __metadata("design:paramtypes", [typeorm_1.Repository])
], AccessTokenRepository);
exports.AccessTokenRepository = AccessTokenRepository;
//# sourceMappingURL=access-token.repository.js.map