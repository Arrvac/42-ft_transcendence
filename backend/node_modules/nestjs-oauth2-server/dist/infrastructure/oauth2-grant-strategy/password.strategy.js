"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordStrategy = void 0;
const strategy_1 = require("../../domain/strategy");
const dto_1 = require("../../ui/dto");
const common_1 = require("@nestjs/common");
const command_1 = require("../../app/command");
const cqrs_1 = require("@nestjs/cqrs");
let PasswordStrategy = class PasswordStrategy {
    /**
     * Constructor
     *
     * @param clientRepository
     * @param userValidator
     * @param commandBus
     */
    constructor(clientRepository, userValidator, commandBus) {
        this.clientRepository = clientRepository;
        this.userValidator = userValidator;
        this.commandBus = commandBus;
    }
    async validate(request, client) {
        if ((client.clientSecret && client.clientSecret !== request.clientSecret) ||
            client.deletedAt !== null ||
            !client.grants.includes(request.grantType)) {
            return false;
        }
        return true;
    }
    async getOauth2Response(request, client) {
        const user = await this.userValidator.validate(request.username, request.password);
        const requestScopes = typeof request.scopes === 'string' ? [request.scopes] : request.scopes;
        const accessToken = await this.commandBus.execute(new command_1.CreateAccessTokenCommand(client.id, JSON.stringify(requestScopes), request.exp, request.iat, request, user.id));
        return new dto_1.OAuth2Response(accessToken.accessToken, accessToken.refreshToken, ~~((accessToken.accessTokenExpiresAt.getTime() - Date.now()) / 1000), ~~((accessToken.refreshTokenExpiresAt.getTime() - Date.now()) / 1000));
    }
};
PasswordStrategy = __decorate([
    strategy_1.Oauth2GrantStrategy('password'),
    __param(0, common_1.Inject('ClientRepositoryInterface')),
    __param(1, common_1.Inject('UserValidatorInterface')),
    __metadata("design:paramtypes", [Object, Object, cqrs_1.CommandBus])
], PasswordStrategy);
exports.PasswordStrategy = PasswordStrategy;
//# sourceMappingURL=password.strategy.js.map